buildscript {
    repositories {
    	jcenter()
		mavenLocal()
		mavenCentral()
    }
}

plugins {
    id "de.undercouch.download" version "1.2"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

jar {
    baseName = 'dynamodb-streams'
    version =  '0.0.1'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
 }
 
dependencies {
    compile("com.amazonaws:aws-java-sdk:1.9.37")
    compile("com.amazonaws:amazon-kinesis-client:1.2.0")
    compile("com.fasterxml.jackson.core:jackson-databind:2.4.4")
	compile("commons-logging:commons-logging:1.2")
	compile("org.mockito:mockito-all:1.9.5")
	testCompile("junit:junit:4.8.1")
}

test {
    testLogging.showStandardStreams = true
}

//MavenRepository identity setting
group = 'c9katayama'
archivesBaseName = 'dynamodb-streams' 
version = '0.0.1'

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: "file:${projectDir}/mvn-repo")
		}
	}
}

[install.repositories.mavenInstaller, uploadArchives.repositories.mavenDeployer]*.pom*.whenConfigured { pom ->
	pom.project {
		inceptionYear '2015'
		packaging 'jar'
		licenses {
			license {
				name 'The Apache Software License, Version 2.0'
				url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
				distribution 'repo'
			}
		}
	}
}


def dynamoLocalDir = 'dynamodb-local'

task prepareLibs << {
	println "prepare libs"
    //install dynamodb local
	def zip = "${dynamoLocalDir}/dynamodb_local.zip"
	if(file(dynamoLocalDir + '/DynamoDBLocal.jar').exists()==false){
	  	println "download dynamodb local"
	    download {
	        src 'http://dynamodb-local.s3-website-us-west-2.amazonaws.com/dynamodb_local_latest.zip'
	        dest zip
	    }
	    copy{
		    from zipTree(zip)
	    	into dynamoLocalDir
	    }
	}	
}

task runDynamoDBLocal << {
	def props = new Properties()
	new File("src/main/resources/app-dev.properties").withInputStream { 
	  stream -> props.load(stream) 
	}
	def port = props["dynamodblocal.port"]
	"java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb -port ${port}".execute(null,file(dynamoLocalDir))
	println "running DynamoDBLocal with port ${port}"
}

compileJava.dependsOn prepareLibs